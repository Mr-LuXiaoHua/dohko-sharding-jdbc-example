



spring.application.name=DOHKO-SHARDING-DB-TABLE
server.port=8080

mybatis.mapper-locations=classpath:mapper/*.xml


# 数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names=ds0,ds1

spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbcUrl=jdbc:mysql://localhost:3306/ds0?serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456

spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbcUrl=jdbc:mysql://localhost:3306/ds1?serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456


# 由数据源名 + 表名组成，以小数点分隔。
# 多个表以逗号分隔，支持inline表达式。
# 缺省表示使用已知数据源与逻辑表名称生成数据节点。
# 用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds$->{0..1}.t_user_$->{0..1}

# 分库算法, 根据gender字段分库
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=gender
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{gender % 2}

# 分表算法，根据user_id字段分表
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user_$->{user_id % 2}


